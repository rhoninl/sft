syntax = "proto3";

package shifu;

option go_package = "github.com/rhoninl/sft/pkg/root/web/proto/shifu";

// ShifuService provides management capabilities for Shifu platform
service ShifuService {
  // Installation Management
  rpc CheckInstallation(CheckInstallationRequest) returns (CheckInstallationResponse) {}
  rpc GetAllAvailableVersions(GetAllAvailableVersionsRequest) returns (GetAllAvailableVersionsResponse) {}
  rpc InstallShifu(InstallShifuRequest) returns (InstallShifuResponse) {}
  rpc UninstallShifu(UninstallShifuRequest) returns (UninstallShifuResponse) {}

  // Device Management
  rpc ListDevices(ListDevicesRequest) returns (ListDevicesResponse) {}
  rpc GetDeviceDetails(GetDeviceDetailsRequest) returns (GetDeviceDetailsResponse) {}
  rpc InstallViaURL(InstallViaURLRequest) returns (Empty) {}
  rpc DeleteDevice(DeleteDeviceRequest) returns (Empty) {}
  
  // DeviceShifu Operations
  rpc RestartDeviceShifu(RestartDeviceShifuRequest) returns (Empty) {}
  rpc DeleteDeviceShifu(DeleteDeviceShifuRequest) returns (Empty) {}
  rpc GetAllContainerName(GetAllContainerNameRequest) returns (GetAllContainerNameResponse) {}
  rpc GetDeviceShifuLogs(GetDeviceShifuLogsRequest) returns (stream GetDeviceShifuLogsResponse) {}
  
  // Network Operations
  rpc ForwardPort(ForwardPortRequest) returns (stream ForwardPortResponse) {}
  
  // Command and Control
  rpc ExecuteCommand(CommandRequest) returns (stream CommandResponse) {}
  rpc GetCompletions(CompletionRequest) returns (CompletionResponse) {}
}

// Common empty message for operations without return values
message Empty {}

//
// Installation Management Messages
//
message CheckInstallationRequest {}

message CheckInstallationResponse {
  bool installed = 1;
}

message GetAllAvailableVersionsRequest {}

message GetAllAvailableVersionsResponse {
  repeated string versions = 1;
}

message InstallShifuRequest {
  string version = 1;
}

message InstallShifuResponse {
  bool success = 1;
  string error = 2;
}

message UninstallShifuRequest {}

message UninstallShifuResponse {
  bool success = 1;
  string error = 2;
}

message InstallViaURLRequest {
  string url = 1;
}

//
// Device Management Messages
//
message Device {
  string name = 1;
  string protocol = 2;
  string address = 3;
  string status = 4;
  string age = 5;
}

message EdgeDevice {
  string sku = 1;
  string connection = 2;
  string address = 3;
  string protocol = 4;
  string status = 5;
  string age = 6;
  string setting = 7;
  string gateway = 8;
}

message ListDevicesRequest {}

message ListDevicesResponse {
  repeated Device devices = 1;
}

message GetDeviceDetailsRequest {
  string name = 1;
}

message GetDeviceDetailsResponse {
  EdgeDevice edge_device = 1;
  string apis = 2;
}

message DeleteDeviceRequest {
  string device_name = 1;
}

//
// DeviceShifu Operation Messages
//
message RestartDeviceShifuRequest {
  string device_name = 1;
}

message DeleteDeviceShifuRequest {
  string device_name = 1;
}

message GetAllContainerNameRequest {
  string device_name = 1;
}

message GetAllContainerNameResponse {
  repeated string container_names = 1;
}

message GetDeviceShifuLogsRequest {
  string device_name = 1;
  string container_name = 2;
}

message GetDeviceShifuLogsResponse {
  string log = 1;
}

//
// Network Operation Messages
//
message ForwardPortRequest {
  string device_name = 1;
  string device_port = 2;
  string local_port = 3;
}

message ForwardPortResponse {
  bool success = 1;
}

//
// Command and Control Messages
//
message CommandRequest {
  string command = 1;
}

message CommandResponse {
  string output = 1;
  bool is_error = 2;
}

message CompletionRequest {
  string partial = 1;      // Partial command input
  string current_dir = 2;  // Current working directory
}

message CompletionResponse {
  repeated string completions = 1;  // List of completion suggestions
}
