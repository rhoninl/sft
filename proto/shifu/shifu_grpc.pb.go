// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0--rc1
// source: proto/shifu/shifu.proto

package shifu

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShifuService_CheckInstallation_FullMethodName       = "/shifu.ShifuService/CheckInstallation"
	ShifuService_InstallShifu_FullMethodName            = "/shifu.ShifuService/InstallShifu"
	ShifuService_UninstallShifu_FullMethodName          = "/shifu.ShifuService/UninstallShifu"
	ShifuService_GetAllAvailableVersions_FullMethodName = "/shifu.ShifuService/GetAllAvailableVersions"
)

// ShifuServiceClient is the client API for ShifuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShifuServiceClient interface {
	// Check if Shifu is installed
	CheckInstallation(ctx context.Context, in *CheckInstallationRequest, opts ...grpc.CallOption) (*CheckInstallationResponse, error)
	// Install Shifu with specific version
	InstallShifu(ctx context.Context, in *InstallShifuRequest, opts ...grpc.CallOption) (*InstallShifuResponse, error)
	// Uninstall Shifu
	UninstallShifu(ctx context.Context, in *UninstallShifuRequest, opts ...grpc.CallOption) (*UninstallShifuResponse, error)
	// Get All Available Versions
	GetAllAvailableVersions(ctx context.Context, in *GetAllAvailableVersionsRequest, opts ...grpc.CallOption) (*GetAllAvailableVersionsResponse, error)
}

type shifuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShifuServiceClient(cc grpc.ClientConnInterface) ShifuServiceClient {
	return &shifuServiceClient{cc}
}

func (c *shifuServiceClient) CheckInstallation(ctx context.Context, in *CheckInstallationRequest, opts ...grpc.CallOption) (*CheckInstallationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckInstallationResponse)
	err := c.cc.Invoke(ctx, ShifuService_CheckInstallation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shifuServiceClient) InstallShifu(ctx context.Context, in *InstallShifuRequest, opts ...grpc.CallOption) (*InstallShifuResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstallShifuResponse)
	err := c.cc.Invoke(ctx, ShifuService_InstallShifu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shifuServiceClient) UninstallShifu(ctx context.Context, in *UninstallShifuRequest, opts ...grpc.CallOption) (*UninstallShifuResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UninstallShifuResponse)
	err := c.cc.Invoke(ctx, ShifuService_UninstallShifu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shifuServiceClient) GetAllAvailableVersions(ctx context.Context, in *GetAllAvailableVersionsRequest, opts ...grpc.CallOption) (*GetAllAvailableVersionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAvailableVersionsResponse)
	err := c.cc.Invoke(ctx, ShifuService_GetAllAvailableVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShifuServiceServer is the server API for ShifuService service.
// All implementations must embed UnimplementedShifuServiceServer
// for forward compatibility.
type ShifuServiceServer interface {
	// Check if Shifu is installed
	CheckInstallation(context.Context, *CheckInstallationRequest) (*CheckInstallationResponse, error)
	// Install Shifu with specific version
	InstallShifu(context.Context, *InstallShifuRequest) (*InstallShifuResponse, error)
	// Uninstall Shifu
	UninstallShifu(context.Context, *UninstallShifuRequest) (*UninstallShifuResponse, error)
	// Get All Available Versions
	GetAllAvailableVersions(context.Context, *GetAllAvailableVersionsRequest) (*GetAllAvailableVersionsResponse, error)
	mustEmbedUnimplementedShifuServiceServer()
}

// UnimplementedShifuServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShifuServiceServer struct{}

func (UnimplementedShifuServiceServer) CheckInstallation(context.Context, *CheckInstallationRequest) (*CheckInstallationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInstallation not implemented")
}
func (UnimplementedShifuServiceServer) InstallShifu(context.Context, *InstallShifuRequest) (*InstallShifuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallShifu not implemented")
}
func (UnimplementedShifuServiceServer) UninstallShifu(context.Context, *UninstallShifuRequest) (*UninstallShifuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallShifu not implemented")
}
func (UnimplementedShifuServiceServer) GetAllAvailableVersions(context.Context, *GetAllAvailableVersionsRequest) (*GetAllAvailableVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAvailableVersions not implemented")
}
func (UnimplementedShifuServiceServer) mustEmbedUnimplementedShifuServiceServer() {}
func (UnimplementedShifuServiceServer) testEmbeddedByValue()                      {}

// UnsafeShifuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShifuServiceServer will
// result in compilation errors.
type UnsafeShifuServiceServer interface {
	mustEmbedUnimplementedShifuServiceServer()
}

func RegisterShifuServiceServer(s grpc.ServiceRegistrar, srv ShifuServiceServer) {
	// If the following call pancis, it indicates UnimplementedShifuServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShifuService_ServiceDesc, srv)
}

func _ShifuService_CheckInstallation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInstallationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShifuServiceServer).CheckInstallation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShifuService_CheckInstallation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShifuServiceServer).CheckInstallation(ctx, req.(*CheckInstallationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShifuService_InstallShifu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallShifuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShifuServiceServer).InstallShifu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShifuService_InstallShifu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShifuServiceServer).InstallShifu(ctx, req.(*InstallShifuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShifuService_UninstallShifu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallShifuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShifuServiceServer).UninstallShifu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShifuService_UninstallShifu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShifuServiceServer).UninstallShifu(ctx, req.(*UninstallShifuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShifuService_GetAllAvailableVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAvailableVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShifuServiceServer).GetAllAvailableVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShifuService_GetAllAvailableVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShifuServiceServer).GetAllAvailableVersions(ctx, req.(*GetAllAvailableVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShifuService_ServiceDesc is the grpc.ServiceDesc for ShifuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShifuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shifu.ShifuService",
	HandlerType: (*ShifuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckInstallation",
			Handler:    _ShifuService_CheckInstallation_Handler,
		},
		{
			MethodName: "InstallShifu",
			Handler:    _ShifuService_InstallShifu_Handler,
		},
		{
			MethodName: "UninstallShifu",
			Handler:    _ShifuService_UninstallShifu_Handler,
		},
		{
			MethodName: "GetAllAvailableVersions",
			Handler:    _ShifuService_GetAllAvailableVersions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shifu/shifu.proto",
}
