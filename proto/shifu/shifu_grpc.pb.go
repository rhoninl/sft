// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/shifu/shifu.proto

package shifu

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShifuService_GetAllAvailableVersions_FullMethodName = "/shifu.ShifuService/GetAllAvailableVersions"
	ShifuService_CheckInstallation_FullMethodName       = "/shifu.ShifuService/CheckInstallation"
	ShifuService_InstallShifu_FullMethodName            = "/shifu.ShifuService/InstallShifu"
	ShifuService_UninstallShifu_FullMethodName          = "/shifu.ShifuService/UninstallShifu"
	ShifuService_ListDevices_FullMethodName             = "/shifu.ShifuService/ListDevices"
	ShifuService_GetDeviceDetails_FullMethodName        = "/shifu.ShifuService/GetDeviceDetails"
	ShifuService_ForwardPort_FullMethodName             = "/shifu.ShifuService/ForwardPort"
	ShifuService_RestartDeviceShifu_FullMethodName      = "/shifu.ShifuService/RestartDeviceShifu"
	ShifuService_DeleteDeviceShifu_FullMethodName       = "/shifu.ShifuService/DeleteDeviceShifu"
	ShifuService_GetAllContainerName_FullMethodName     = "/shifu.ShifuService/GetAllContainerName"
	ShifuService_GetDeviceShifuLogs_FullMethodName      = "/shifu.ShifuService/GetDeviceShifuLogs"
	ShifuService_ExecuteCommand_FullMethodName          = "/shifu.ShifuService/ExecuteCommand"
	ShifuService_GetCompletions_FullMethodName          = "/shifu.ShifuService/GetCompletions"
	ShifuService_InstallViaURL_FullMethodName           = "/shifu.ShifuService/InstallViaURL"
)

// ShifuServiceClient is the client API for ShifuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShifuServiceClient interface {
	// Get All Available Versions
	GetAllAvailableVersions(ctx context.Context, in *GetAllAvailableVersionsRequest, opts ...grpc.CallOption) (*GetAllAvailableVersionsResponse, error)
	// Check if Shifu is installed
	CheckInstallation(ctx context.Context, in *CheckInstallationRequest, opts ...grpc.CallOption) (*CheckInstallationResponse, error)
	// Install Shifu with specific version
	InstallShifu(ctx context.Context, in *InstallShifuRequest, opts ...grpc.CallOption) (*InstallShifuResponse, error)
	// Uninstall Shifu
	UninstallShifu(ctx context.Context, in *UninstallShifuRequest, opts ...grpc.CallOption) (*UninstallShifuResponse, error)
	// List devices in the cluster
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	// Get device details
	GetDeviceDetails(ctx context.Context, in *GetDeviceDetailsRequest, opts ...grpc.CallOption) (*GetDeviceDetailsResponse, error)
	// Forward Port
	ForwardPort(ctx context.Context, in *ForwardPortRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ForwardPortResponse], error)
	// Restart deviceShifu
	RestartDeviceShifu(ctx context.Context, in *RestartDeviceShifuRequest, opts ...grpc.CallOption) (*Empty, error)
	// Delete deviceShifu
	DeleteDeviceShifu(ctx context.Context, in *DeleteDeviceShifuRequest, opts ...grpc.CallOption) (*Empty, error)
	// Get all container name of deviceShifu
	GetAllContainerName(ctx context.Context, in *GetAllContainerNameRequest, opts ...grpc.CallOption) (*GetAllContainerNameResponse, error)
	// Get deviceShifu logs
	GetDeviceShifuLogs(ctx context.Context, in *GetDeviceShifuLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDeviceShifuLogsResponse], error)
	// Execute command
	ExecuteCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CommandResponse], error)
	// Get completions
	GetCompletions(ctx context.Context, in *CompletionRequest, opts ...grpc.CallOption) (*CompletionResponse, error)
	// Install Via URL
	InstallViaURL(ctx context.Context, in *InstallViaURLRequest, opts ...grpc.CallOption) (*Empty, error)
}

type shifuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShifuServiceClient(cc grpc.ClientConnInterface) ShifuServiceClient {
	return &shifuServiceClient{cc}
}

func (c *shifuServiceClient) GetAllAvailableVersions(ctx context.Context, in *GetAllAvailableVersionsRequest, opts ...grpc.CallOption) (*GetAllAvailableVersionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAvailableVersionsResponse)
	err := c.cc.Invoke(ctx, ShifuService_GetAllAvailableVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shifuServiceClient) CheckInstallation(ctx context.Context, in *CheckInstallationRequest, opts ...grpc.CallOption) (*CheckInstallationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckInstallationResponse)
	err := c.cc.Invoke(ctx, ShifuService_CheckInstallation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shifuServiceClient) InstallShifu(ctx context.Context, in *InstallShifuRequest, opts ...grpc.CallOption) (*InstallShifuResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstallShifuResponse)
	err := c.cc.Invoke(ctx, ShifuService_InstallShifu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shifuServiceClient) UninstallShifu(ctx context.Context, in *UninstallShifuRequest, opts ...grpc.CallOption) (*UninstallShifuResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UninstallShifuResponse)
	err := c.cc.Invoke(ctx, ShifuService_UninstallShifu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shifuServiceClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, ShifuService_ListDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shifuServiceClient) GetDeviceDetails(ctx context.Context, in *GetDeviceDetailsRequest, opts ...grpc.CallOption) (*GetDeviceDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeviceDetailsResponse)
	err := c.cc.Invoke(ctx, ShifuService_GetDeviceDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shifuServiceClient) ForwardPort(ctx context.Context, in *ForwardPortRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ForwardPortResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ShifuService_ServiceDesc.Streams[0], ShifuService_ForwardPort_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ForwardPortRequest, ForwardPortResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShifuService_ForwardPortClient = grpc.ServerStreamingClient[ForwardPortResponse]

func (c *shifuServiceClient) RestartDeviceShifu(ctx context.Context, in *RestartDeviceShifuRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ShifuService_RestartDeviceShifu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shifuServiceClient) DeleteDeviceShifu(ctx context.Context, in *DeleteDeviceShifuRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ShifuService_DeleteDeviceShifu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shifuServiceClient) GetAllContainerName(ctx context.Context, in *GetAllContainerNameRequest, opts ...grpc.CallOption) (*GetAllContainerNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllContainerNameResponse)
	err := c.cc.Invoke(ctx, ShifuService_GetAllContainerName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shifuServiceClient) GetDeviceShifuLogs(ctx context.Context, in *GetDeviceShifuLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDeviceShifuLogsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ShifuService_ServiceDesc.Streams[1], ShifuService_GetDeviceShifuLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetDeviceShifuLogsRequest, GetDeviceShifuLogsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShifuService_GetDeviceShifuLogsClient = grpc.ServerStreamingClient[GetDeviceShifuLogsResponse]

func (c *shifuServiceClient) ExecuteCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CommandResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ShifuService_ServiceDesc.Streams[2], ShifuService_ExecuteCommand_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CommandRequest, CommandResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShifuService_ExecuteCommandClient = grpc.ServerStreamingClient[CommandResponse]

func (c *shifuServiceClient) GetCompletions(ctx context.Context, in *CompletionRequest, opts ...grpc.CallOption) (*CompletionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompletionResponse)
	err := c.cc.Invoke(ctx, ShifuService_GetCompletions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shifuServiceClient) InstallViaURL(ctx context.Context, in *InstallViaURLRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ShifuService_InstallViaURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShifuServiceServer is the server API for ShifuService service.
// All implementations must embed UnimplementedShifuServiceServer
// for forward compatibility.
type ShifuServiceServer interface {
	// Get All Available Versions
	GetAllAvailableVersions(context.Context, *GetAllAvailableVersionsRequest) (*GetAllAvailableVersionsResponse, error)
	// Check if Shifu is installed
	CheckInstallation(context.Context, *CheckInstallationRequest) (*CheckInstallationResponse, error)
	// Install Shifu with specific version
	InstallShifu(context.Context, *InstallShifuRequest) (*InstallShifuResponse, error)
	// Uninstall Shifu
	UninstallShifu(context.Context, *UninstallShifuRequest) (*UninstallShifuResponse, error)
	// List devices in the cluster
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	// Get device details
	GetDeviceDetails(context.Context, *GetDeviceDetailsRequest) (*GetDeviceDetailsResponse, error)
	// Forward Port
	ForwardPort(*ForwardPortRequest, grpc.ServerStreamingServer[ForwardPortResponse]) error
	// Restart deviceShifu
	RestartDeviceShifu(context.Context, *RestartDeviceShifuRequest) (*Empty, error)
	// Delete deviceShifu
	DeleteDeviceShifu(context.Context, *DeleteDeviceShifuRequest) (*Empty, error)
	// Get all container name of deviceShifu
	GetAllContainerName(context.Context, *GetAllContainerNameRequest) (*GetAllContainerNameResponse, error)
	// Get deviceShifu logs
	GetDeviceShifuLogs(*GetDeviceShifuLogsRequest, grpc.ServerStreamingServer[GetDeviceShifuLogsResponse]) error
	// Execute command
	ExecuteCommand(*CommandRequest, grpc.ServerStreamingServer[CommandResponse]) error
	// Get completions
	GetCompletions(context.Context, *CompletionRequest) (*CompletionResponse, error)
	// Install Via URL
	InstallViaURL(context.Context, *InstallViaURLRequest) (*Empty, error)
	mustEmbedUnimplementedShifuServiceServer()
}

// UnimplementedShifuServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShifuServiceServer struct{}

func (UnimplementedShifuServiceServer) GetAllAvailableVersions(context.Context, *GetAllAvailableVersionsRequest) (*GetAllAvailableVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAvailableVersions not implemented")
}
func (UnimplementedShifuServiceServer) CheckInstallation(context.Context, *CheckInstallationRequest) (*CheckInstallationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInstallation not implemented")
}
func (UnimplementedShifuServiceServer) InstallShifu(context.Context, *InstallShifuRequest) (*InstallShifuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallShifu not implemented")
}
func (UnimplementedShifuServiceServer) UninstallShifu(context.Context, *UninstallShifuRequest) (*UninstallShifuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallShifu not implemented")
}
func (UnimplementedShifuServiceServer) ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedShifuServiceServer) GetDeviceDetails(context.Context, *GetDeviceDetailsRequest) (*GetDeviceDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDetails not implemented")
}
func (UnimplementedShifuServiceServer) ForwardPort(*ForwardPortRequest, grpc.ServerStreamingServer[ForwardPortResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ForwardPort not implemented")
}
func (UnimplementedShifuServiceServer) RestartDeviceShifu(context.Context, *RestartDeviceShifuRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartDeviceShifu not implemented")
}
func (UnimplementedShifuServiceServer) DeleteDeviceShifu(context.Context, *DeleteDeviceShifuRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceShifu not implemented")
}
func (UnimplementedShifuServiceServer) GetAllContainerName(context.Context, *GetAllContainerNameRequest) (*GetAllContainerNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllContainerName not implemented")
}
func (UnimplementedShifuServiceServer) GetDeviceShifuLogs(*GetDeviceShifuLogsRequest, grpc.ServerStreamingServer[GetDeviceShifuLogsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetDeviceShifuLogs not implemented")
}
func (UnimplementedShifuServiceServer) ExecuteCommand(*CommandRequest, grpc.ServerStreamingServer[CommandResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteCommand not implemented")
}
func (UnimplementedShifuServiceServer) GetCompletions(context.Context, *CompletionRequest) (*CompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompletions not implemented")
}
func (UnimplementedShifuServiceServer) InstallViaURL(context.Context, *InstallViaURLRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallViaURL not implemented")
}
func (UnimplementedShifuServiceServer) mustEmbedUnimplementedShifuServiceServer() {}
func (UnimplementedShifuServiceServer) testEmbeddedByValue()                      {}

// UnsafeShifuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShifuServiceServer will
// result in compilation errors.
type UnsafeShifuServiceServer interface {
	mustEmbedUnimplementedShifuServiceServer()
}

func RegisterShifuServiceServer(s grpc.ServiceRegistrar, srv ShifuServiceServer) {
	// If the following call pancis, it indicates UnimplementedShifuServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShifuService_ServiceDesc, srv)
}

func _ShifuService_GetAllAvailableVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAvailableVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShifuServiceServer).GetAllAvailableVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShifuService_GetAllAvailableVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShifuServiceServer).GetAllAvailableVersions(ctx, req.(*GetAllAvailableVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShifuService_CheckInstallation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInstallationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShifuServiceServer).CheckInstallation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShifuService_CheckInstallation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShifuServiceServer).CheckInstallation(ctx, req.(*CheckInstallationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShifuService_InstallShifu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallShifuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShifuServiceServer).InstallShifu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShifuService_InstallShifu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShifuServiceServer).InstallShifu(ctx, req.(*InstallShifuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShifuService_UninstallShifu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallShifuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShifuServiceServer).UninstallShifu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShifuService_UninstallShifu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShifuServiceServer).UninstallShifu(ctx, req.(*UninstallShifuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShifuService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShifuServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShifuService_ListDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShifuServiceServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShifuService_GetDeviceDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShifuServiceServer).GetDeviceDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShifuService_GetDeviceDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShifuServiceServer).GetDeviceDetails(ctx, req.(*GetDeviceDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShifuService_ForwardPort_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ForwardPortRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShifuServiceServer).ForwardPort(m, &grpc.GenericServerStream[ForwardPortRequest, ForwardPortResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShifuService_ForwardPortServer = grpc.ServerStreamingServer[ForwardPortResponse]

func _ShifuService_RestartDeviceShifu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartDeviceShifuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShifuServiceServer).RestartDeviceShifu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShifuService_RestartDeviceShifu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShifuServiceServer).RestartDeviceShifu(ctx, req.(*RestartDeviceShifuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShifuService_DeleteDeviceShifu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceShifuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShifuServiceServer).DeleteDeviceShifu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShifuService_DeleteDeviceShifu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShifuServiceServer).DeleteDeviceShifu(ctx, req.(*DeleteDeviceShifuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShifuService_GetAllContainerName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllContainerNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShifuServiceServer).GetAllContainerName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShifuService_GetAllContainerName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShifuServiceServer).GetAllContainerName(ctx, req.(*GetAllContainerNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShifuService_GetDeviceShifuLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDeviceShifuLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShifuServiceServer).GetDeviceShifuLogs(m, &grpc.GenericServerStream[GetDeviceShifuLogsRequest, GetDeviceShifuLogsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShifuService_GetDeviceShifuLogsServer = grpc.ServerStreamingServer[GetDeviceShifuLogsResponse]

func _ShifuService_ExecuteCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShifuServiceServer).ExecuteCommand(m, &grpc.GenericServerStream[CommandRequest, CommandResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShifuService_ExecuteCommandServer = grpc.ServerStreamingServer[CommandResponse]

func _ShifuService_GetCompletions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShifuServiceServer).GetCompletions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShifuService_GetCompletions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShifuServiceServer).GetCompletions(ctx, req.(*CompletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShifuService_InstallViaURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallViaURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShifuServiceServer).InstallViaURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShifuService_InstallViaURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShifuServiceServer).InstallViaURL(ctx, req.(*InstallViaURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShifuService_ServiceDesc is the grpc.ServiceDesc for ShifuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShifuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shifu.ShifuService",
	HandlerType: (*ShifuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllAvailableVersions",
			Handler:    _ShifuService_GetAllAvailableVersions_Handler,
		},
		{
			MethodName: "CheckInstallation",
			Handler:    _ShifuService_CheckInstallation_Handler,
		},
		{
			MethodName: "InstallShifu",
			Handler:    _ShifuService_InstallShifu_Handler,
		},
		{
			MethodName: "UninstallShifu",
			Handler:    _ShifuService_UninstallShifu_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _ShifuService_ListDevices_Handler,
		},
		{
			MethodName: "GetDeviceDetails",
			Handler:    _ShifuService_GetDeviceDetails_Handler,
		},
		{
			MethodName: "RestartDeviceShifu",
			Handler:    _ShifuService_RestartDeviceShifu_Handler,
		},
		{
			MethodName: "DeleteDeviceShifu",
			Handler:    _ShifuService_DeleteDeviceShifu_Handler,
		},
		{
			MethodName: "GetAllContainerName",
			Handler:    _ShifuService_GetAllContainerName_Handler,
		},
		{
			MethodName: "GetCompletions",
			Handler:    _ShifuService_GetCompletions_Handler,
		},
		{
			MethodName: "InstallViaURL",
			Handler:    _ShifuService_InstallViaURL_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ForwardPort",
			Handler:       _ShifuService_ForwardPort_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDeviceShifuLogs",
			Handler:       _ShifuService_GetDeviceShifuLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExecuteCommand",
			Handler:       _ShifuService_ExecuteCommand_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/shifu/shifu.proto",
}
